.TL
NetBSD for the Advanced Minimalist
.AU
rambius
.AB
This document describes a NetBSD setup that relies on as
few dependencies as possible. It is equally suitable for
small laptops and for bigger machines.
.AE
.NH
Why Going Minimal?
.PP
The short answer is: because we can. The long answer is
that more software needs more maintenance. As 
BSD users we are spoilt - it takes two commands on NetBSD
to upgrade all your packages:
.DS
$ sudo pkgin update
$ sudo pkgin upgrade
.DE
Still it does requires time and effort. Hence the question - why do I need to update something I don't use.
.NH 2 
My Path to Minimal or No Dependencies
.PP
My first laptop ran FreeBSD with KDE. I enjoyed it
but KDE upgrades sometimes failed - back then I had time to
fix them. Then during a NYCBSD meeting
G. R. told me he was using XFCE. I tried it
and it was a little bit lighter and required less
dependencies. Next, I worked on a
project where I did not have access to a window 
manager, but I managed to set up a convenient working
environment, see my talk at NYCBUG from 2019-09-04.
.PP
Then out of curiosity I bought a Pinebook laptop and
installed NetBSD on it. I did not
want to do any extensive configuration of a window manager
and I didn't want to bother with many updates and I was
using it most in text-mode.
.PP
Finally in December 2023 I was travelling in Europe and I
was straned for a day in Germany because of a snow storm.
I messaged and emailed (from my phone) my family over
several channels to know that I was ok. While I was waiting
for flights I asked myself how much of that communication
I could have done from that Pinebook laptop. How much of my
daily work can be done on almost vanilla NetBSD? I took out
the laptop,
a pencil and a paper notebook and started
working on that idea.
.PP This talk is the product of that effort. 
.NH
NetBSD Installation on the Pinebook
.PP
The Pinebook comes with Android on its 16GB eMMC storage.
I never removed the Android because the machine can boot
from an MicroSD card. There is a NetBSD live image that
can be written on an microSD card.
.PP
These links are useful:
.IP \[bu]
https://wiki.netbsd.org/ports lists what NetBSD port
supports what CPU and architecture;
.IP \[bu]
https://wiki.netbsd.org/ports/aarch64 describes the port
that runs on the Pinebook;
.IP \[bu]
https://cdn.NetBSD.org/pub/NetBSD/NetBSD-9.3/evbarm-aarch64/
contains the binaries for that port; and finally
.IP \[bu]
https://cdn.NetBSD.org/pub/NetBSD/NetBSD-9.3/evbarm-aarch64/INSTALL.html contains the installation instructions.
.PP
The installation consists of downloading the NetBSD image,
transfering it to an SD card, and making the SD bootable. I
am using another NetBSD machine for these steps.
.NH 2
Downloading the NetBSD Image
.PP
Downloading the image is as easy as
.DS
$ curl -sS -C - https://cdn.NetBSD.org/pub/NetBSD/NetBSD-9.3/evbarm-aarch64/binary/gzimg/arm64.img.gz -o arm64.img.gz
$ gunzip arm64.img.gz
.DE
.NH 2
Transfering the image to a microSD Card
.PP
The next step is to copy the uncompressed image to a
microSD card. You need a microSD card, an SD card reader
and depending on the reader an SD card adapter. Put the
the microSD card either in the adapter and then the adapter
in the reader or in the reader directly. Plugin
the reader in the machine where you downloaded the image.
Find in dmesg what device the microSD card maps to. Write
the image to that device:
.DS
$ sudo dd if=arm64.img of=/dev/rld0c bs=1m conv=sync
.DE
.NH 2
Making the SD Bootable
.PP
The Pinebook uses the U-Boot bootloader. You need to put
the U-Boot's Secondary Program Loader on the microSD card
so that it knows how boot NetBSD. NetBSD provides
provides a package with the U-Boot's SPL for Pinebook:
.DS
$ sudo pkgin install u-boot-pinebook
$ cd /usr/pkg/share/u-boot/pinebook
$ sudo dd if=u-boot-sunxi-with-spl.bin of=/dev/rld0c bs=1k seek=8 conv=sync
.DE
.PP
The dd commands can be dangerous. Make sure you have the
correct output devices especially if you run them on a
Pinebook - you may destroy your boot microSD card.
.NH 2
Booting the Pinebook
.PP
Put the microSD card and turn on the laptop. It loads the
NetBSD OS from the card. The image is configured to
resize the NetBSD partition to fill the whole card and to
resize the / slice to fill the whole partition. It reboots
again and the system is ready.
.PP
There were certain rough edges after my first boot. The
image enables only one tty that the system uses to send the
console messages. Those messages mangled my input. I got a
flood of errors about the wirless adapter I had plugged in.
I unplugged it so that I can use the tty.
.NH
Initial Configuration
.PP
We now need to create the initial user, give them
permissions to furter configure the system, enable the
network, etc.
.NH 2
Setting the root's Password
.PP
The image's original root password is the empty string. We
login as root and we change it immediately.
.DS
login: root
Password:
# passwd
.DE
.NH 2
Adding a Non-root User
.PP
Working as root all the time is dangerous. We need to
create a non-root user who can run comands as root. The
commans su switches identities. A user can run it if
they are in the wheels group:
.DS
# useradd -m -G wheel rambius
# passwd rambius
# exit
login: rambius
Password:
$ su -
Password:
#
.DE
.PP
After that change we will never login directly as root.
.NH 2
Configuring the ttys
.PP
The image enables only one tty that the system use to send
the console messages. Edit /etc/ttys to enable the
additional ones:
.DS
$ su -
# vi /etc/ttys
# kill -s HUP 1
# exit
$ exit
.DE
.PP
Now we switch with Ctrl-FN to ttyN.
.NH 2
Configuring the Wireless
.PP
Now we plug the wireless adapter back in. The
wpa_supplicant daemon is responsible for the wifi
connections. We have to configure it and start it. Its
configuration file is /etc/wpa_supplicant.conf where we
put the network's details, namely its SSID and the
password:
.DS
ctrl_interface=/var/run/wpa_supplicant
ctrl_interface_group=wheel
update_config=1

network={
        ssid="myssid"
        psk="mypass"
        scan_ssid=1
}
.DE
.PP
Next we configure it to start on boot by adding the
following line it to /etc/rc.conf:
.DS
wpa_supplicant=YES
.DE
.PP
We either reboot or we start the daemon manually
.DS
# service wpa_supplicant start
# ping nycbug.org
# ifconfig
.DE
.NH 2
Configuring the Package Manager pkgin
.PP
I said that I would use a minimal amount of third-party
packages; I did not meant no packages at all.
.PP
The command pkg_add installs binary packages pre-built for
the corresponding architecture. I prefer to use pkgin
because of its searching capabilities. I use pkg_add to
install pkgin only.
.PP
pkg_add needs to know where it can find the packages.
The environment variable PKG_PATH specifies their location.
.DS
$ su -
# PKG_PATH=http://cdn.netbsd.org/pub/pkgsrc/packages/`uname -s`/`uname -p`/`uname -r`/All
# export PKG_PATH
# pkg_add pkgin
.DE
.PP
I initially tried PKG_PATH with https, but it failed and I
switched to http.
.PP
`uname -s` returns the OS's name, in this case NetBSD ,
`uname -p` returns the architecture name, for example
aarc64, `uname -r` returns the OS's version. The reason
for so many parameters is that the packages are built
for many architectures and for several versions.
.PP
pkgin is almost ready now. We need to adjust its
repositories list in its configuration file
/usr/pkg/etc/pkgin/repositories.conf and fetch the list
with remote packaes. I only had to remove the hardcoded
values for the OS's version and architecture:
.DS
# tail -1 /usr/pkg/etc/pkgin/repositories.conf
https://cdn.netbsd.org/pub/pkgsrc/packages/NetBSD/$arch/$osrelease/All
# pkgin update
.DE
.NH 2
Installing and Configuring sudo
.PP
The first package we will install with pkgin is sudo,
because we want to not use su. sudo can run only a
specific command as root in a non-root session thus
decreasing the possibilities for errors.
.DS
# pkgin install sudo
.DE
The configuration file /usr/pkg/etc/sudoers specfifies
what users and groups can run what commands. It already
has a commented entry that allows members of the wheel
group to run any command. We don't edit the file directly;
instead we use the visudo command.
.DS
# visudo
.DE
We uncomment the line
.DS
%wheel ALL=(ALL:ALL) ALL
.DE
.PP
We exit the su session and from now on we use only sudo
for any command that requires elevated permissions.
.PP
Usually in a more restricted environent you can only
run specific commands with specific arguments. To view
these commands use -l option of the command sudo:
.DS
$ whoami
rambius
$ sudo -l
User rambius may run the following commands on arm64:
    (ALL : ALL) ALL
.DE
.PP
For a complete treatment of sudo read the book Sudo
Mastery by Michael Lucas.
.PP
This concludes the initial configuration of the system.
Next we will discuss various programs and applications.
.NH
Program and Applications
.PP
We can now do a lot of useful tasks with our small laptop,
for example:
.IP \[bu] 2
write a book with groff;
.IP \[bu]
organize your expenses with awk (it's the tax season);
.IP \[bu]
develop with cc, make, etc.
.PP
What follows is a list of programs and application that I
use regularly or find them interesting.
.NH 2
The "Intergrated Development Environment" tmux.
.PP
My user interface of choice is tmux. It is in NetBSD's base
system and does not require seperate installation. It is a
terminal multiplexer that allows splitting the screen in
several horizontal or vertical panes. My usual development 
style is to have 3 panes - one for the code I work on, one
for its unit test and one with a shell where I compile and
test. When writing this document with nroff I use only two
panes - one to write it in vi and one to view it. I put the
processing commands in a Makefile and I call make from vi.
You can also open several windows in tmux and have as many
panes as you want in them. Think of windows as tabs. 
.PP
The biggest advantage of tmux is that you can detach from
your session and then attach to it later. The sessions
also survives network disconnects. For example
.DS
$ ssh sdf.org
sdf$ tmux
# Open windows and panes
# Ctrl-b d to detach or network drops and later:
$ ssh sdf.org
sdf$ tmux attach
# and continue your session 
.DE
.PP
tmux also has a status line where it can dispay data about
the current session or about the system. That brings us to
the next topic
.NH 2
Battery Monitoring and envstat
.PP
Laptops get plugged and unplugged all the time especially
if you have cats or dogs. The command envstat shows the
supported devices' sensor values:   
.DS
$ envstat
                               Current  CritMax  WarnMax  WarnMin  CritMin  Unit
[axppmic0]
               ACIN present:      TRUE
               VBUS present:     FALSE
            battery present:      TRUE
                   charging:     FALSE
               charge state:    NORMAL
            battery voltage:     4.176                                         V
     battery charge current:     0.001                                         A
  battery discharge current:       N/A
            battery percent:       100                                      none
   battery maximum capacity:     4.844                                        Ah
   battery current capacity:     4.843                                        Ah
[sunxithermal0]
            CPU temperature:    43.000                                      degC
          GPU temperature 1:    44.000                                      degC
          GPU temperature 2:    44.000                                      degC
.DE
.PP
The device axppmic0 has a sensor that reads the battery
percentage. We can extract the value with awk:
.DS
$ envstat | awk '/battery percent/ { printf("%d%%", $3) }'
.DE
.PP
For convenience we put the command in a shell script
~/bin/bat.sh and we can show its output in tmux's status
line. 
